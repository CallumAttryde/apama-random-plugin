package com.apamax.random;

/**
 * A handle to a particular generator and distribution combination.
 */
event Generator
{
	import "random" as rand;
	/**
	 * Get the next number in the sequence generated by this generator.
	 * Return will be the configured type biased by the configured
	 * distribution.
	 * 
	 * @returns A number in the configured format from the configured random sequence.
	 * @see RandomPlugin.createGenerator
	 */
	action generate() returns any
	{
		return rand.next(_generator);
	}
	/**
	 * Set the seed on the generator. The default seed is randomized.
	 *
	 */
	action setSeed(any seed)
	{
		rand.seed(_generator, seed);
	}
	/**
	 * Generator state.
	 * @private
	 */
	chunk _generator;
}

/**
 * Provides an interface to random numbers in a selection of
 * distributions suitable for use in statistical modelling 
 * applications
 */
event RandomPlugin
{
	import "random" as rand;
	/** Configure generator to return values from a uniform distribution.
	    Arguments are min and max (inclusive) of range. Either integer
	    or float output. Arguments are of the same type as the output. */
	constant integer DIST_UNIFORM := 0;
	/** Configure generator to return values from a normal distribution.
	    Arguments are the float mean and standard deviation of the distribution.
	    Output must be float. */
	constant integer DIST_NORMAL := 1;
	/** Configure generator to return values from a log normal distribution.
	    Arguments are the float m and s parameters of the distribution. 
	    Output must be float. */
	constant integer DIST_LOGNORMAL := 2;
	/** Configure generator to return values from a gamma distribution.
	    Arguments are the float alpha and beta parameters of the distribution.
	    Output must be float. */
	constant integer DIST_GAMMA := 3;
	/** Configure generator to return values from a Chi-squared distribution.
	    The argument is the float degrees of freedom of the distribution.
	    Output must be float. */
	constant integer DIST_CHI_SQUARED := 4;
	/** Configure generator to return values from a Cauchy distribution.
	    Arguments are the float a and b parameters of the distribution.
	    Output must be float. */
	constant integer DIST_CAUCHY := 5;
	/** Configure generator to return values from a Fisher F distribution.
	    Arguments are the float m and n degrees of freedom of the distribution.
	    Output must be float. */
	constant integer DIST_FISHER_F := 6;
	/** Configure generator to return values from a Student T distribution.
	    Argument is the float degrees of freedom of the distribution.
	    Output must be float. */
	constant integer DIST_STUDENT_T := 7;
	/** Configure generator to return values from a Bernoulli distribution.
	    Argument is a float probability of returning true. 
	    Output must be bool. */
	constant integer DIST_BERNOULLI := 8;
	/** Configure generator to return values from a binomial distribution.
	    Arguments are integer number of trials and float probability of a true each trial.
	    Output must be integer. */
	constant integer DIST_BINOMIAL := 9;
	/** Configure generator to return values from a geometric distribution.
	    Argument is the probability that a trial returns true. 
	    Output must be integer. */
	constant integer DIST_GEOMETRIC := 10;
	/** Configure generator to return values from a negative binomial distribution.
	    Arguments are integer number of trials and float probability of a true each trial.
	    Output must be integer. */
	constant integer DIST_NEGATIVE_BINOMIAL := 11;
	/** Configure generator to return values from a Poisson distribution.
	    Argument is the float mean of the distribution to return.
	    Output must be integer. */
	constant integer DIST_POISSON := 12;
	/** Configure generator to return values from an exponential distribution.
	    Argument is the float lambda parameter of the distribution, which must be positive.
	    Output must be float. */
	constant integer DIST_EXPONENTIAL := 13;
	/** Configure generator to return values from a Weibull distribution.
	    Arguments are the float a and b parameters of the distribution. 
	    Output must be float. */
	constant integer DIST_WEIBULL := 14;
	/** Configure generator to return values from an extreme value distribution.
	    Arguments are the float alpha and beta parameters of the distribution.
	    Output must be float. */
	constant integer DIST_EXTREME_VALUE := 15;
	/** Configure generator to return values from a discrete distribution.
	    Argument are a list of float weights for each value in the distribution.
	    Output must be integer. */
	constant integer DIST_DISCRETE := 16;
	
	/** Configure generator to return integer values. */
	constant integer OUTPUT_INTEGER := 0;
	/** Configure generator to return float values. */
	constant integer OUTPUT_REAL := 1; 
	/** Configure generator to return boolean values. */
	constant integer OUTPUT_BOOL := 2;
	
	/** Configure generator to create values using a Merseinne Twister (Recommended). */
	constant integer SOURCE_MERSEINNE := 0;
	/** Configure generator to create values using a Linear Congruential Generator. */
	constant integer SOURCE_LCG := 1;
	/** Configure generator to read values from a platform-specific random device. */
	constant integer SOURCE_DEVICE := 2;
	
	/**
	 * Create a random generator configured with the given distribution, source and output.
	 * It may be easier to use one of the other convenience wrapper functions. The types
	 * should be configured with the constants on this event type.
	 *
	 * @param sourceType The source to use to generate random numbers. Use one of the SOURCE_ constants.
	 * @param outputType The output format to generate. Use OUTPUT_INTEGER or OUTPUT_REAL.
	 * @param distributionType The expected distribution of this generator. Use one of the DIST_ constants.
     * @returns An appropriately configured Generator object.
	 */
	static action createGenerator(integer sourceType, integer outputType, integer distributionType, sequence<any> distributionArgs)
		returns Generator
	{
		return Generator(rand.createGenerator(sourceType, outputType, distributionType, distributionArgs));
	}
	
	/** 
	 * Create a unform distribution generator of integers using the Merseinne Twister engine.
	 *
	 * @param lowerBound minimum value (inclusive)
	 * @param upperBound maximum value (inclusive)
	 */
	static action createUniformIntGenerator(integer lowerBound, integer upperBound) returns Generator
	{
		return createGenerator(SOURCE_MERSEINNE, OUTPUT_INTEGER, DIST_UNIFORM, [<any>lowerBound, <any>upperBound]);
	}
	
	/** 
	 * Create a unform distribution generator of floats using the Merseinne Twister engine.
	 *
	 * @param lowerBound minimum value (inclusive)
	 * @param upperBound maximum value (inclusive)
	 */
	static action createUniformFloatGenerator(float lowerBound, float upperBound) returns Generator
	{
		return createGenerator(SOURCE_MERSEINNE, OUTPUT_REAL, DIST_UNIFORM, [<any>lowerBound, <any>upperBound]);
	}
	/** 
	 * Create a unform distribution generator of floats using the Merseinne Twister engine.
	 * @param mean mean of the distribution.
	 * @param standardDeviation standard deviation of the distribution.
	 */
	static action createNormalGenerator(float mean, float standardDeviation) returns Generator
	{
		return createGenerator(SOURCE_MERSEINNE, OUTPUT_REAL, DIST_NORMAL, [<any>mean,<any>standardDeviation]);
	}
	/** 
	 * Create a unform distribution generator of floats using the Merseinne Twister engine.
	 * @param mean mean of the distribution.
	 */
	static action createPoissonGenerator(float mean) returns Generator
	{
		return createGenerator(SOURCE_MERSEINNE, OUTPUT_INTEGER, DIST_POISSON, [<any>mean]);
	}
	/** 
	 * Create a unform distribution generator of floats using the Merseinne Twister engine.
	 * @param trials number of trials to run.
	 * @param probability probability of a success on each trial.
	 */
	static action createBinomialGenerator(integer trials, float probability) returns Generator
	{
		return createGenerator(SOURCE_MERSEINNE, OUTPUT_INTEGER, DIST_BINOMIAL, [<any>trials, <any>probability]);
	}
	/** 
	 * Create a unform distribution generator of integers using the random device engine.
	 *
	 * @param lowerBound minimum value (inclusive)
	 * @param upperBound maximum value (inclusive)
	 */
	static action createHardwareUniformIntGenerator(integer lowerBound, integer upperBound) returns Generator
	{
		return createGenerator(SOURCE_DEVICE, OUTPUT_INTEGER, DIST_UNIFORM, [<any>lowerBound, <any>upperBound]);
	}
}

